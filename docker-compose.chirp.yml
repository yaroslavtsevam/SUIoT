# Volumes #####################################################################
volumes:
  caddy_config:
  caddy_data:
    # external: true 
  grafana_data:
    # external: true
  grafana_config:
  frost_db_data:
    # external: true
  nodered_data:
    # external: true
  dbbackups:
    # external: true
  mosquitto:
    # external: true
  redisdata:
    # external: true

# Networks ####################################################################
networks:
  net:
    driver: bridge

# Services ####################################################################
services:
  # Caddy ---------------------------------------------------------------------
  caddy:
    image: lucaslorentz/caddy-docker-proxy:${CADDY_VERSION:?CADDY_VERSION not set}
    # container_name: caddy
    ports:
      - 80:80
      - 443:443
      # - 2019:2019
    networks:
      - net
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:2019/metrics || exit 1"]
      # interval: 1m30s
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 10s
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - caddy_data:/data
      - caddy_config:/config
    restart: unless-stopped
    labels:
      caddy.email: "${ADMIN_EMAIL}"
      # Avoids exceeding rate limit for Let's Encrypt certificates
      # Disable to obtain production SSL certificate
      # https://caddyserver.com/docs/automatic-https#testing
      caddy.acme_ca: "https://acme-staging-v02.api.letsencrypt.org/directory"

  # FROST Server - Web --------------------------------------------------------
  frost-web:
    image: fraunhoferiosb/frost-server:${FROST_VERSION:?FROST_VERSION not set}
     # container_name: frost-web
    networks:
      - net
    ports:
       - 1883:1883
       - 8080:8080
    depends_on:
       frost-db:
         condition: service_healthy
    restart: unless-stopped
    healthcheck:
       test: ["CMD", 'bash', '-c', 'curl -f "http://127.0.0.1:8080/FROST-Server/"']
       interval: 10s
       timeout: 5s
       retries: 20
    environment:
       serviceRootUrl: "https://${DOMAIN:?DOMAIN not set}${FROST_SUBPATH:?FROST_SUBPATH not set}"
       persistence_db_driver: "org.postgresql.Driver"
       persistence_db_url: "jdbc:postgresql://frost-db:5432/${FROST_DB_NAME:?FROST_DB_NAME not set}"
       persistence_db_username: "${FROST_DB_USER:?FROST_DB_USER not set}"
       persistence_db_password: "${FROST_DB_PASSWORD:?FROST_DB_PASSWORD not set}"
       mqtt_host: ${DOMAIN:?DOMAIN not set}
       # Uncomment this to enable BasicAuth
       # https://fraunhoferiosb.github.io/FROST-Server/settings/auth.html
       # auth_provider: "de.fraunhofer.iosb.ilt.frostserver.auth.basic.BasicAuthProvider"
       # auth_db_driver: "org.postgresql.Driver"
       # auth_db_url: "jdbc:postgresql://frost-db:5432/${FROST_DB_NAME:?FROST_DB_NAME not set}"
       # auth_db_username: "${FROST_DB_USER:?FROST_DB_USER not set}"
       # auth_db_password: "${FROST_DB_PASSWORD:?FROST_DB_PASSWORD not set}"
       # auth_autoUpdateDatabase: "true"
    env_file:
       - frost.env
    labels:
       caddy: "${DOMAIN:?DOMAIN not set}"
       caddy.handle_path: "${FROST_SUBPATH:?FROST_SUBPATH not set}/*"
       caddy.handle_path.0_rewrite: "* /FROST-Server{uri}"
       caddy.handle_path.1_reverse_proxy: "{{upstreams http 8080}}"
       caddy.redir: "${FROST_SUBPATH:?FROST_SUBPATH not set} ${FROST_SUBPATH:?FROST_SUBPATH not set}/"

  #     # Use this if no suburl for FROST is used
  #     # caddy.handle: "/FROST-Server/*"
  #     # caddy.handle.reverse_proxy: "{{upstreams http 8080}}"
  #     # caddy.redir: "/FROST-Server /FROST-Server/"

  # FROST Server - DB ---------------------------------------------------------
  frost-db:
    container_name: frost_db
    image: "kartoza/postgis:${FROST_DB_VERSION:?FROST_DB_VERSION not set}"
    ports:
     - 5432:5432
    networks:
      - net
    shm_size: '1gb'
    environment:
      POSTGRES_DB: "${FROST_DB_NAME:?FROST_DB_NAME not set}"
      POSTGRES_USER: "${FROST_DB_USER:?FROST_DB_USER not set}"
      POSTGRES_PASS: "${FROST_DB_PASSWORD:?FROST_DB_PASSWORD not set}"
      POSTGRES_GROUP_NAME: "${FROST_DB_GROUP_NAME:?FROST_DB_GROUP_NAME not set}"
      POSTGRES_MULTIPLE_EXTENSIONS: "${FROST_DB_EXTENSIONS:?FROST_DB_EXTENSIONS not set}"
      PGDATA: "/var/lib/postgresql/data/pgdata"
      PGUSER: "${FROST_DB_USER:?FROST_DB_USER not set}"
      REPLICATION: "false"
      IGNORE_INIT_HOOK_LOCKFILE: "false"
      PASSWORD_AUTHENTICATION: "md5"
      RUN_AS_ROOT: "true"
    volumes:
      - ./database/docker-entrypoint-initdb/001-chirpstack-ini.sql:/docker-entrypoint-initdb.d/001-chirpstack-ini.sql
      - ./database/docker-entrypoint-initdb/002-chirpstack-ext.sh:/docker-entrypoint-initdb.d/002-chirpstack-ext.sh
      - frost_db_data:/var/lib/postgresql/data
      - dbbackups:/backups
      - ./database/extra_conf/extra.conf:/settings/extra.conf 
    restart: on-failure
    healthcheck:
      test: "PGPASSWORD=${FROST_DB_PASSWORD:?FROST_DB_PASSWORD not set} pg_isready -h 127.0.0.1 -U ${FROST_DB_USER:?FROST_DB_USER not set} -d ${FROST_DB_NAME:?FROST_DB_NAME not set}"
      interval: 10s
      timeout: 5s
      retries: 5

# DB backup scipt from cartooza -------------------------------------------    
  dbbackups:
    image: "kartoza/pg-backup:${FROST_DB_VERSION:?FROST_DB_VERSION not set}"
    networks:
      - net
    volumes:
      - ./database/backups:/backups
    environment:
      DUMPPREFIX: FROST
      POSTGRES_HOST: frost_db
      POSTGRES_USER: "${FROST_DB_USER:?FROST_DB_USER not set}"
      POSTGRES_PASS: "${FROST_DB_PASSWORD:?FROST_DB_PASSWORD not set}"
      POSTGRES_PORT: 5432
      RUN_AS_ROOT: true
      CRON_SCHEDULE: "30 3 */1 * *"
        #- DB_DUMP_ENCRYPTION=true
    restart: on-failure
    # depends_on:
    #   frost-db:
    #     condition: service_healthy
# Chirpstack -------------------------------------------    
  chirpstack:
    image: chirpstack/chirpstack:4.8.1
    networks:
      - net
    command: -c /etc/chirpstack
    restart: unless-stopped
    volumes:
      - ./chirpstack/config:/etc/chirpstack
      - ./chirpstack/lorawan-devices:/opt/lorawan-devices
    depends_on:
      - frost-db
      - mosquitto
      - redis
    environment:
      - MQTT_BROKER_HOST=mosquitto
      - MQTT_BROKER_PORT=1884
      - REDIS_HOST=redis
      - POSTGRESQL_HOST=frost_db
    ports:
      - 8081:8080

  chirpstack-gateway-bridge:
    image: chirpstack/chirpstack-gateway-bridge:4
    networks:
      - net
    restart: unless-stopped
    ports:
      - 1700:1700/udp
    volumes:
      - ./chirpstack/chirpstack-gateway-bridge:/etc/chirpstack-gateway-bridge
    environment:
      - INTEGRATION__MQTT__EVENT_TOPIC_TEMPLATE=ru864/gateway/{{ .GatewayID }}/event/{{ .EventType }}
      - INTEGRATION__MQTT__STATE_TOPIC_TEMPLATE=ru864/gateway/{{ .GatewayID }}/state/{{ .StateType }}
      - INTEGRATION__MQTT__COMMAND_TOPIC_TEMPLATE=ru864/gateway/{{ .GatewayID }}/command/#
    depends_on:
      - mosquitto
  
  chirpstack-gateway-bridge-basicstation:
    image: chirpstack/chirpstack-gateway-bridge:4
    networks:
      - net
    restart: unless-stopped
    command: -c /etc/chirpstack-gateway-bridge/chirpstack-gateway-bridge-basicstation-ru864.toml
    ports:
      - 3001:3001
    volumes:
      - ./chirpstack/chirpstack-gateway-bridge:/etc/chirpstack-gateway-bridge
    depends_on:
      - mosquitto

  chirpstack-rest-api:
    image: chirpstack/chirpstack-rest-api:4
    networks:
      - net
    restart: unless-stopped
    command: --server chirpstack:8080 --bind 0.0.0.0:8090 --insecure
    ports:
      - 8090:8090
    depends_on:
      - chirpstack

  redis:
    image: redis:7-alpine
    networks:
      - net
    restart: unless-stopped
    command: redis-server --save 300 1 --save 60 100 --appendonly no
    volumes:
      - redisdata:/data

  mosquitto:
    image: eclipse-mosquitto
    networks:
    - net
    hostname: mosquitto
    container_name: mosquitto
    restart: unless-stopped
    # depends_on:
    #   frost-web:
    #     condition: service_healthy
    ports:
      - "1884:1884"
      - "9001:9001"
    volumes:
      - mosquitto:/etc/mosquitto
      - ./mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf

# PGadmin - DB ------------------------------------------------------------
  pgadmin:
    image: dpage/pgadmin4
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
      - PGADMIN_CONFIG_SERVER_MODE=${PGADMIN_CONFIG_SERVER_MODE}
      - PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED=${PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED}
      - PGADMIN_LISTEN_PORT=5050
      - SCRIPT_NAME=${PGADMIN_SUBPATH:?PGADMIN_SUBPATH not set}
      - PGADMIN_CONFIG_ENHANCED_COOKIE_PROTECTION=${PGADMIN_CONFIG_ENHANCED_COOKIE_PROTECTION:?PGADMIN_CONFIG_ENHANCED_COOKIE_PROTECTION not set}
      - PGADMIN_CONFIG_WTF_CSRF_CHECK_DEFAULT=${PGADMIN_CONFIG_WTF_CSRF_CHECK_DEFAULT:?PGADMIN_CONFIG_WTF_CSRF_CHECK_DEFAULT not set}
      - PGADMIN_CONFIG_WTF_CSRF_ENABLED=${PGADMIN_CONFIG_WTF_CSRF_ENABLED:?PGADMIN_CONFIG_WTF_CSRF_ENABLED not set}
    entrypoint: /bin/sh -c "chmod 600 /pgpass; /entrypoint.sh;"
    user: root
    networks:
     - net
    labels:
      caddy: "${DOMAIN:?DOMAIN not set}"
      caddy.handle: "${PGADMIN_SUBPATH:?PGADMIN_SUBPATH not set}/*"
      caddy.handle.reverse_proxy: "{{upstreams http 5050}}"
      caddy.handle.reverse_proxy.header_up: "Redirect off"
      caddy.redir: "${PGADMIN_SUBPATH:?PGADMIN_SUBPATH not set} ${PGADMIN_SUBPATH:?PGADMIN_SUBPATH not set}/"

    configs:
      - source: servers.json
        target: /pgadmin4/servers.json
      - source: pgpass
        target: /pgpass
    tty: true
    
    

  # Grafana -------------------------------------------------------------------
  grafana:
    image: grafana/grafana-oss:${GRAFANA_VERSION:?GRAFANA_VERSION not set}
    volumes:
      - grafana_data:/var/lib/grafana
      - grafana_config:/etc/grafana
    networks:
      - net
    # ports:
    #   - 3000:3000/tcp
    restart: unless-stopped
    healthcheck:
      test: ["CMD", 'bash', '-c', 'wget -S "http://127.0.0.1:3000/api/health" |& grep "200 OK"']
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      GF_INSTALL_PLUGINS: "grafana-clock-panel,grafana-simple-json-datasource, marcusolsson-json-datasource,
        snuids-trafficlights-panel, citilogics-geoloop-panel, iosb-sensorthings-datasource, yesoreyeram-boomtheme-panel,
        snuids-svg-panel, marcusolsson-hourly-heatmap-panel, citilogics-geoloop-panel,
        fatcloud-windrose-panel,https://github.com/briangann/grafana-gauge-panel/releases/download/v0.0.9/briangann-gauge-panel-0.0.9.zip;briangann-gauge-panel"
      GF_SERVER_DOMAIN: "${DOMAIN:?DOMAIN not set}"
      GF_SERVER_ROOT_URL: "${DOMAIN:?DOMAIN not set}${GRAFANA_SUBPATH:?GRAFANA_SUBPATH not set}"
      GF_SERVER_SERVE_FROM_SUB_PATH: "true"
      # See for date formats: https://momentjs.com/docs/#/displaying/
      # GF_DATE_FORMATS_FULL_DATE: "Do MMM, YYYY @ hh:mm:ss"
      GF_DATE_FORMATS_INTERVAL_MONTH: "YYYY.MM"
      GF_DATE_FORMATS_INTERVAL_DAY: "dd, DD.MM"
      GF_DATE_FORMATS_INTERVAL_HOUR: "dd, DD.MM HH:mm"
      GF_DATE_FORMATS_INTERVAL_MINUTE: "dd, HH:mm"
      # Admin user
      GF_SECURITY_ADMIN_USER: "${GRAFANA_ADMIN_USER:?GRAFANA_ADMIN_USER not set}"
      GF_SECURITY_ADMIN_PASSWORD: "${GRAFANA_ADMIN_PASSWORD:?GRAFANA_ADMIN_PASSWORD not set}"
      # Dashbord embedding
      GF_SECURITY_ALLOW_EMBEDDING: "true"
      # Grafana 10 feature toggles
      GF_FEATURE_TOGGLES_ENABLE: publicDashboards       
    labels:
      caddy: "${DOMAIN:?DOMAIN not set}"
      caddy.handle: "${GRAFANA_SUBPATH:?GRAFANA_SUBPATH not set}/*"
      caddy.handle.reverse_proxy: "{{upstreams http 3000}}"
      caddy.redir: "${GRAFANA_SUBPATH:?GRAFANA_SUBPATH not set} ${GRAFANA_SUBPATH:?GRAFANA_SUBPATH not set}/"

  # NodeRED -------------------------------------------------------------------
  nodered:
    # container_name: nodered
    networks:
      - net
    # ports:
    #   - 1880:1880
    volumes:
      - nodered_data:/data
    restart: unless-stopped
    environment:
      DOMAIN: "${DOMAIN:?DOMAIN not set}"
      NODE_RED_CREDENTIAL_SECRET: "${NODE_RED_CREDENTIAL_SECRET:?NODE_RED_CREDENTIAL_SECRET not set}"
      TZ: "Europe/Moscow"
      NODE_RED_ENABLE_PROJECTS: "${NODE_RED_ENABLE_PROJECTS:?NODE_RED_ENABLE_PROJECTS not set}"
      # Admin access
      # See: https://nodered.org/docs/user-guide/runtime/securing-node-red#generating-the-password-hash
      NODE_RED_ADMIN_USERNAME: "${NODE_RED_ADMIN_USERNAME:?NODE_RED_ADMIN_USERNAME not set}"
      NODE_RED_ADMIN_PASSWORD: "${NODE_RED_ADMIN_PASSWORD:?NODE_RED_ADMIN_PASSWORD not set}"
      # NODE_OPTIONS: "--max_old_space_size=128"
    build:
      context: nodered
      # dockerfile:
      args:
        - BASEIMAGE_TAG=${NODE_RED_VERSION:?NODE_RED_VERSION not set}
    labels:
      caddy: "${DOMAIN:?DOMAIN not set}"
      # Serve Node-RED from subpath /nodered
      caddy.handle_path: "${NODE_RED_SUBPATH:?NODE_RED_SUBPATH not set}/*"
      caddy.handle_path.reverse_proxy: "{{upstreams http 1880}}"
       # Serve Node-RED UI from subpath /nodered/ui
      caddy.handle_path_1: "${NODE_RED_SUBPATH:?NODE_RED_SUBPATH not set}/ui/*"
      caddy.handle_path_1.rewrite: "* /ui{uri}"
      caddy.handle_path_1.reverse_proxy: "{{upstreams http 1880}}"
      # Handle URLs with no trailing /
      caddy.redir: "${NODE_RED_SUBPATH:?NODE_RED_SUBPATH not set} ${NODE_RED_SUBPATH:?NODE_RED_SUBPATH not set}/"
      caddy.redir_1: "${NODE_RED_SUBPATH:?NODE_RED_SUBPATH not set}/ui ${NODE_RED_SUBPATH:?NODE_RED_SUBPATH not set}/ui/"
#Python Apps ------------------------------------------------------------------
  # warroom:
  #   build:
  #     context: ./
  #     dockerfile: warroom.dockerfile
  #   networks:
  #     - net
  #   ports:
  #     - 8082:8082
  #   environment:
  #     - PUID=1000 # change this to your user id
  #     - PGID=1000 # change this to your group id
  #     - STORAGE_SECRET=warroom123warroom
  #   restart: always  
  #   volumes:
  #     - ./warroom_app:/app
  #   depends_on:
  #     frost-web:
  #       condition: service_healthy
  #   labels:
  #     caddy: "${DOMAIN:?DOMAIN not set}"
  #     caddy.handle_path: "${WARROOM_SUBPATH:?WARROOM_SUBPATH not set}/*"
  #     caddy.handle_path.reverse_proxy: "{{upstreams http 8082}}"
      
  # mqtt-processing:
  #   build:
  #     context: ./
  #     dockerfile: mqtt_processing.dockerfile
  #   networks:
  #     - net
  #   ports:
  #     - 8083:8083
  #   environment:
  #     - PUID=1000 # change this to your user id
  #     - PGID=1000 # change this to your group id
  #     - STORAGE_SECRET=mqtt123processing
  #   restart: always  
  #   volumes:
  #     - ./mqtt_processing_app:/app
  #   depends_on:
  #     frost-web:
  #       condition: service_healthy
  #   labels: 
  #     caddy: "${DOMAIN:?DOMAIN not set}"
  #     caddy.handle_path: "${MQTTPROC_SUBPATH:?MQTTPROC_SUBPATH not set}/*"
  #     caddy.handle_path.reverse_proxy: "{{upstreams http 8083}}"

configs:
  pgpass:
    content: ${FROST_DB_CONTNAME:?FROST_DB_CONTNAME not set}:5432:*:${FROST_DB_USER:?FROST_DB_USER not set}:${FROST_DB_PASSWORD:?FROST_DB_PASSWORD not set}
  servers.json:
    content: |
      {"Servers": {"1": {
        "Group": "Servers",
        "Name": "My Local Postgres 16.1",
        "Host": "${FROST_DB_CONTNAME:?FROST_DB_CONTNAME not set}",
        "Port": 5432,
        "MaintenanceDB": "postgres",
        "Username": "${FROST_DB_USER:?FROST_DB_USER not set}",
        "PassFile": "/pgpass",
        "SSLMode": "prefer"
      }}}
